(()=>{"use strict";class t{constructor(t,{onNoteSelect:e,onNoteAdd:o,onNoteEdit:s,onNoteDelete:i}={}){this.root=t,this.onNoteSelect=e,this.onNoteAdd=o,this.onNoteEdit=s,this.onNoteDelete=i,this.root.innerHTML='\n      <div class="notes__sidebar">\n        <button class="notes__add" type="button">Add Note</button>\n        <div class="notes__list"></div>\n      </div>\n      <div class="notes__preview">\n        <input class="notes__title" type="text" placeholder="New Note"\n        />\n        <textarea class="notes__body" placeholder="Take note..."></textarea>\n      </div>\n    ';const n=this.root.querySelector(".notes__add"),l=this.root.querySelector(".notes__title"),r=this.root.querySelector(".notes__body");this.root.querySelector("notes__list"),n.addEventListener("click",(()=>{this.onNoteAdd()})),[l,r].forEach((t=>{t.addEventListener("blur",(()=>{const t=l.value.trim(),e=r.value.trim();this.onNoteEdit(t,e)}))})),this.updateNotePreviewVisibility(!1)}_createListItemHTML(t,e,o,s){return`\n    <div class="notes__list-item" data-note-id="${t}">\n      <h2 class="notes__small-title">${e}</h2>\n      <p class="notes__small-body">${o.substring(0,60)}</p>\n      <p class="notes__small-updated">${s.toLocaleString(void 0,{dateStyle:"full",timeStyle:"short"})}</p>\n  </div>\n    `}updateNoteList(t){const e=this.root.querySelector(".notes__list");e.innerHTML="";for(const o of t){const t=this._createListItemHTML(o.id,o.title,o.body,new Date(o.updated));e.insertAdjacentHTML("beforeend",t)}e.querySelectorAll(".notes__list-item").forEach((t=>{t.addEventListener("click",(()=>{this.onNoteSelect(t.dataset.noteId)})),t.addEventListener("dblclick",(()=>{confirm("Are you sure you want to delete this note?")&&this.onNoteDelete(t.dataset.noteId)}))}))}updateActiveNote(t){this.root.querySelector(".notes__title").value=t.title,this.root.querySelector(".notes__body").value=t.body,this.root.querySelectorAll(".notes__list-item").forEach((t=>{t.classList.remove("notes__list-item--selected")})),this.root.querySelector(`.notes__list-item[data-note-id="${t.id}"]`).classList.add("notes__list-item--selected")}updateNotePreviewVisibility(t){this.root.querySelector(".notes__preview").style.visibility=t?"visible":"hidden"}}class e{static getAllNotes(){return JSON.parse(localStorage.getItem("notesapp-notes")||"[]").sort(((t,e)=>new Date(t.updated)>new Date(e.updated)?-1:1))}static updateNote(t,e){return t.title=e.title,t.body=e.body,t.updated=(new Date).toISOString(),t}static createNote(t){return t.id=Math.floor(1e4*Math.random()),t.updated=(new Date).toISOString(),t}static saveNote(t){const o=this.getAllNotes(),s=o.find((e=>e.id==t.id));s?this.updateNote(s,t):o.push(e.createNote(t)),localStorage.setItem("notesapp-notes",JSON.stringify(o))}static deleteNote(t){const o=e.getAllNotes().filter((e=>e.id!=t));localStorage.setItem("notesapp-notes",JSON.stringify(o))}}const o=document.getElementById("app");new class{constructor(e){this.notes=[],this.activeNote=null,this.view=new t(e,this._handlers()),this._refreshNotes()}_refreshNotes(){const t=e.getAllNotes();this._setNotes(t),t.length>0&&this._setActiveNote(t[0])}_setNotes(t){this.notes=t,this.view.updateNoteList(t),this.view.updateNotePreviewVisibility(t.length>0)}_setActiveNote(t){this.activeNote=t,this.view.updateActiveNote(t)}_handlers(){return{onNoteSelect:t=>{const e=this.notes.find((e=>e.id==t));this._setActiveNote(e)},onNoteAdd:()=>{e.saveNote({title:"",body:""}),this._refreshNotes()},onNoteEdit:(t,o)=>{e.saveNote({id:this.activeNote.id,title:t,body:o}),this._refreshNotes()},onNoteDelete:t=>{e.deleteNote(t),this._refreshNotes()}}}}(o)})();